#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('goodtogo_backend:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var express = require('express');

/**
 * Get port from environment and store in Express.
 */
app.set('https_port', 443);

/**
 * Create HTTPS server.
 */
var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/app.goodtogo.tw/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/app.goodtogo.tw/cert.pem'),
  ca: fs.readFileSync('/etc/letsencrypt/live/app.goodtogo.tw/chain.pem')
}; 
var server = https.createServer(options, app);

// set up plain http server
var http_server = http.createServer();
// set up a route to redirect http to https
http_server.get('*',function(req,res){  
    res.redirect('https://app.goodtogo.tw'+req.url)
})
// have it listen on 80
http_server.listen(80);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(https_port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
